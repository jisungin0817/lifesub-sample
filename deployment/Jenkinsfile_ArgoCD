def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'gradle',
                        image: 'gradle:jdk17',
                        ttyEnabled: true,
                        command: 'cat',
                        envVars: [
                            envVar(key: 'DOCKER_HOST', value: 'unix:///run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE', value: '/run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_RYUK_DISABLED', value: 'true')
                        ]),
        containerTemplate(name: 'azure-cli', image: 'hiondal/azure-kubectl:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'git', image: 'alpine/git:latest', command: 'cat', ttyEnabled: true)
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/run/podman', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def namespace
        def services = ['member', 'mysub', 'recommend']

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage("Setup AKS") {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az aks get-credentials --resource-group rg-digitalgarage-01 --name aks-digitalgarage-01 --overwrite-existing
                        kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -
                        
                        # Create Image Pull Secret
                        kubectl create secret docker-registry acr-secret \
                            --docker-server=${props.registry} \
                            --docker-username=\$(az acr credential show --name dg0405cr --query "username" -o tsv) \
                            --docker-password=\$(az acr credential show --name dg0405cr --query "passwords[0].value" -o tsv) \
                            --namespace=${namespace} \
                            --dry-run=client -o yaml | kubectl apply -f -
                    """
                }
            }
        }

        stage('Build Applications & SonarQube Analysis') {
            container('podman') {
                sh 'podman system service -t 0 unix:///run/podman/podman.sock & sleep 2'
            }

            container('gradle') {
                def testContainersConfig = '''docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy
docker.host=unix:///run/podman/podman.sock
ryuk.container.privileged=true
testcontainers.reuse.enable=true'''

                sh """
                    # TestContainers ÏÑ§Ï†ï
                    mkdir -p member/src/test/resources mysub-infra/src/test/resources recommend/src/test/resources
                    echo '${testContainersConfig}' > member/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > mysub-infra/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > recommend/src/test/resources/testcontainers.properties
                """

                // SonarQube Î∂ÑÏÑù
                withSonarQubeEnv('SonarQube') {
                    sh """
                        chmod +x gradlew

                        # ÎπåÎìú Ïã§Ìñâ
                        ./gradlew :member:build :mysub-infra:build :recommend:build -x test

                        # Member ÏÑúÎπÑÏä§
                        ./gradlew :member:test :member:jacocoTestReport :member:sonar \
                            -Dsonar.projectKey=lifesub-member-dg0405 \
                            -Dsonar.projectName=lifesub-member-dg0405 \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                        # Recommend ÏÑúÎπÑÏä§
                        ./gradlew :recommend:test :recommend:jacocoTestReport :recommend:sonar \
                            -Dsonar.projectKey=lifesub-recommend-dg0405 \
                            -Dsonar.projectName=lifesub-recommend-dg0405 \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                        # Mysub ÏÑúÎπÑÏä§ (biz & infra Íµ¨Ï°∞)
                        ./gradlew :mysub-infra:test :mysub-infra:jacocoTestReport :mysub-infra:sonar \
                            -Dsonar.projectKey=lifesub-mysub-dg0405 \
                            -Dsonar.projectName=lifesub-mysub-dg0405 \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
                    """
                }
            }
        }

        stage('Quality Gate') {
            timeout(time: 10, unit: 'MINUTES') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }

        stage('Build & Push Images') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    sh "podman login ${props.registry} --username \$USERNAME --password \$PASSWORD"

                    services.each { service ->
                        def buildDir = service == 'mysub' ? 'mysub-infra' : service
                        def jarFile = service == 'mysub' ? 'mysub.jar' : "${service}.jar"

                        sh """
                            podman build \
                                --build-arg BUILD_LIB_DIR="${buildDir}/build/libs" \
                                --build-arg ARTIFACTORY_FILE="${jarFile}" \
                                -f deployment/container/Dockerfile \
                                -t ${props.registry}/${props.image_org}/${service}:${imageTag} .

                            podman push ${props.registry}/${props.image_org}/${service}:${imageTag}
                        """
                    }
                }
            }
        }

        stage('Update Manifest Repository') {
            container('git') {
                withCredentials([usernamePassword(
                    credentialsId: 'github-credentials-dg0405',
                    usernameVariable: 'GIT_USERNAME',
                    passwordVariable: 'GIT_PASSWORD'
                )]) {
                    sh """
                        # Git ÏÑ§Ï†ï
                        git config --global user.name "Jenkins"
                        git config --global user.email "jenkins@company.com"
                        
                        # Manifest repository ÌÅ¥Î°†
                        git clone https://\$GIT_USERNAME:\$GIT_PASSWORD@github.com/jisungin0817/lifesub-manifest.git
                        cd lifesub-manifest
                        
                        # Í∞Å ÏÑúÎπÑÏä§Î≥Ñ deployment ÌååÏùº ÏóÖÎç∞Ïù¥Ìä∏
                        for service in member mysub recommend; do
                            deployment_file="lifesub/\${service}/\${service}-deployment.yaml"
                            if [ -f "\$deployment_file" ]; then
                                echo "Updating \$deployment_file with new image tag: ${imageTag}"
                                sed -i "s|image: ${props.registry}/${props.image_org}/\${service}:.*|image: ${props.registry}/${props.image_org}/\${service}:${imageTag}|g" "\$deployment_file"
                                
                                echo "=== Updated \$deployment_file ==="
                                cat "\$deployment_file"
                                echo "=================================="
                            else
                                echo "Warning: \$deployment_file not found"
                            fi
                        done
                        
                        # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã Î∞è Ìë∏Ïãú
                        git add .
                        git commit -m "Update backend services image tag to ${imageTag} - Build #${env.BUILD_NUMBER}"
                        git push origin main
                        
                        echo "üéâ Manifest repository updated successfully!"
                        echo "ArgoCD will automatically deploy the new images."
                    """
                }
            }
        }

        stage('Verify ArgoCD Sync') {
            container('azure-cli') {
                sh """
                    echo "=== ArgoCD Î∞∞Ìè¨ ÌôïÏù∏ ÏïàÎÇ¥ ==="
                    echo "1. ArgoCD UIÏóêÏÑú Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî."
                    echo "2. Îã§Ïùå Î™ÖÎ†πÏúºÎ°ú Pod ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§:"
                    echo "   kubectl -n ${namespace} get pods"
                    echo "3. ÏÉàÎ°úÏö¥ Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏: ${imageTag}"
                    echo "=================================="
                    
                    # ÌòÑÏû¨ Pod ÏÉÅÌÉú Ï∂úÎ†•
                    echo "=== ÌòÑÏû¨ Pod ÏÉÅÌÉú ==="
                    kubectl -n ${namespace} get pods -o wide || echo "No pods found or namespace not ready"
                """
            }
        }
    }
}
